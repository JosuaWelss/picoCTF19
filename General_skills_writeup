PicoCTF – General Skills

Question 1:
Title: The Factory’s Secret (1 point)
Description: There appear to be some mysterious glyphs hidden inside this abandoned factory… I wonder what would happen if you collected them all?
Answered: No
Answer: looks like a simple challenge for gameplay purposes that you can answer after many other challenges.
Hint: describes how to submit your answer; e.g., “picoCTF{<flag>}”

Question 2:
Title: 2Warm (50 points)
Description: Can you convert the number 42 (base 10) to binary (base 2)?
Answered: Yes; picoCTF{101010}
Answer: If you are used to binary numbers it is easy to convert it going from the highest bit to the lowest. Otherwise its also possible to look for an online dec-to-bin converter.
Hint: Describes how to submit the answer with the “picoCTF{<flag>}” format

Question 3:
Title: Lets Warm Up (50 points)
Description: If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?
Answered Yes; picoCTF{p}
Answer: I googled “ascii-table” and used the result I like. Just had to look up the correct pair. Its again also possible to use an online converter.
Hint: Once again it details how to submit your answers with the prefixed requirement; e.g., picoCTF{<flag>}

Question 4:
Title: Warmed Up (50 points)
Description: What is 0x3D (base 16) in decimal (base 10)
Answered: Yes; picoCTF{61}
Answer: I looked into my ascii-table, converter is also a possibilty.
Hint: Same deal on how to submit your answer; i.e., picoCTF{<flag>}

Question 5:
Title: Based (100 points)
Description: What does this bDNhcm5fdGgzX3lwcDM1 mean? I think it has something to do with bases.
Answered: Yes, picoCTF{l3arn_th3_r0p35}
Answer: The title hints, that it is about base64, so a quick google search for a bas64 converter brought up an easy solution.
Hint: Same as previous; i.e., picoCTF{<flag>}


Question 6:
Title: First Grep (100 points)
Description: Can you find the flag in the file? This would be really tedious to look through manually, something tells me there is a better way. You can also find the file in /problems/first-grep_5_452e1c163eb14b6753e9a155c3ae588 on the shell server.
Answered: Yes, picoCTF{grep_is_good_to_find_things_887251c6}
Answer: Title hints the usage of grep is advised. Using it to search for the term “pico” turned up the correct result.
Hint: grep tutorial (hyper link to a grep tutorial)
Pro Tip: grep is one of those commands that is extremely useful for when you already know a string you’re looking for exists within a file. Since the answer submission requires picoCTF, grepping a file for that string will return matching results.

Question 7:
Title: Resources (100 points)
Description: We put together a bunch of resources to help you out on our website! If you go over there, you might even find a flag! https://picoctf.com/resources (link)
Answered: Yes, picoCTF{r3source_pag3_flag}
Answer: Answer is sitting right in the middle of the screen.
Hint: There was no hint available for this challenge




Question 8:
Title: strings it (100 points)
Description: Can you find the flag in file without running it? You can also find the file in /problems/strings-it_2_865eec66d190ef75386fb14e15972126 on the shell server.
Answered: Yes, picoCTF{5tRIng5_1T_d5b86184}
Answer: I first started with trying the grep search again, which I knew won’t work. I then googled around a bit and used “xxd”. Since xxd strings does not result in the correct solution, I piped the output into “grep pico” which resulted in:
0001aaa0: 7069 636f 4354 467b 3574 5249 6e67 355f  picoCTF{5tRIng5_
Obviously is something missing here, so I adjusted the grep to print out the next 2 following lines to by adding: “-A 2”. This resulted in: 
0001aaa0: 7069 636f 4354 467b 3574 5249 6e67 355f  picoCTF{5tRIng5_
0001aab0: 3154 5f64 3562 3836 3138 347d 0000 0000  1T_d5b86184}....
0001aac0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
Obviously I got the solution here. I also read it and googled for the “strings it” command. It would have been the easier solution.
Hint: strings (hyperlink to strings’ man page)

Question 9:
Title: what’s a net cat? (100 points)
Description: Using netcat (nc) is going to be pretty important. Can you connect to 2019shell1.picoctf.com at port 21865 to get the flag?
Answered: Yes, picoCTF{nEtCat_Mast3ry_4fefb685}
Answer: Used man netcat. And then connected to the address. One of the easiest challenges.
Hint: nc tutorial (hyper link to nc man page)

Question 10:
Title: Based (200 points)
Description: To get truly l337, you must understand different data encodings, such as hexadecimal or binary. Can you get the flag from this program to prove you are on the way to becoming l337? Connect with nc 2019shell1.picoctf.com 20836.
Answered: Yes, picoCTF{learning_about_converting_values_6cdcad0d}
Answer:  Quite easy, just googled the converters for each encoding. 45 sec is enough to do it each time.
Hint: I hear python can convert things.
Hint: It might help to have multiple windows open

Question 11:
Title: First Grep: Part II (200 points)
Description: Can you find the flag in /problems/first-grep—part-ii_5_956980126dc47c50540b0f8f35a8e443/files on the shell server? Remember to use grep.
Answered: Yes; {grep_r_to_find_this_0898e9c9}
Answer: Using grep with the “-r” option to search recursively did the job here.
Hint: grep tutorial (hyper link to a grep tutorial)
Pro Tip: I touched on grep above, but you can use the -r option to recursively go through all files in a given directory! This saves you the pain of going through each one individually.

Question 12:
Plumbing (200 points)
Description: Sometimes you need to handle process data outside of a file. Can you find a way to keep the output from this program and search for the flag? Connect to 2019shell1.picoctf.com 57911.
Answered: Yes, picoCTF{digital_plumb3r_931b2271}
Answer:  The title hints the usage of pipes. After connecting it was obvious you have to pipe the output to the grep command to find the flag.
Hint: Remember the flag format is picoCTF{XXXX}
Hint: What’s a pipe? No, not that kind of pipe… This kind (hyperlink about Linux piping)

Question 13:
Title: whats-the-difference (200 points)
Description: Can you spot the difference? Kitters cattos. They are also available at /problem/whats-the-difference_0_00862749a2aeb45993f6cc9cf98a47a on the shell server
Answered: Yes, picoCTF{th3yr3_a5_d1ff3r3nt_4s_bu773r_4nd_j311y_aslkjfdsalkfslkflkjdsfdszmz10548}
Answer: I tried diff and found out it does not work with binary files. I googled around and found out about “cmp”. I saw the output and realized I need to get the 8th to 11th character (the second column) which meant piping the output from “cmp” into “cut -c 8-11”
Hint: How do you find the difference between two files?
Hint: Dumping the data from a hex editor may make it easier to compare

Question: 14:
Title: where-is-the-file (200 points)
Description: I’ve used a super-secret mind trick to hide this file. Maybe something lies in /problems/where-is-the-file_1_5487839f5b7db0ddbaf642cdb5c9b3b5
Answered: Yes; picoCTF{w3ll_that_d1dnt_w0RK_3e782057}
Answer: I was aware of hidden files, so that was quite fast to do. Just typed “ls -la” (only the a is needed).
Hint: What command can see/read files
Hint: What’s the manual page of ls?

Question 15:
Title: flag_shop (300 points)
Description: There’s a flag shop selling stuff, can you buy a flag? Source. Connect with nc 2019shell1.picoctf.com 3967.
Answered: Yes, picoCTF{m0n3y_bag5_cd0ead78}
Answer: I fucked up and forgot about the Source file in the Description. I instantly knew the challenge was about an buffer overflow but did not think far enough. After seeing the source code, it was easy to do the maths. An Integer in c is stored as 2 or 4 Bytes in memory. I tested the limits of the possible integer values, but since I did not see the source code, I forgot about multiplying the input with 900 to get to the limits. So I did not really overflow the shop. After reading the description again I noticed the link to the source code. After that it was clear that I have to divide the  value limit of the integer through 900. That alone was not enough. I had to add a small number on top of it to complete the overflow.
Hint: Two’s complement can do some weird things when numbers get really big!

Question 16:
Title: mus1c (300 points)
Description: I wrote you a song. Put it in the picoCTF{} flag format.
Answered: Yes, picoCTF{rrrocknrn0113r}
Answer: Downloaded the file and opened it in notepad++. It looked like a song but also like a programming language. Knowing there are many isoteric programming languages I quickly found Rockstar. The “official” Rockstar website has an online converter for the language, that gets one the solution.
Hint: Do you think you can master Rockstar?

uestion 17:
Title: 1_wanna_b3_a_r0ck5tar (350 points)
Description: I wrote you another song. Put the flag in the picoCTF{} flag format.
Answered: Yes, picoCTF{BONJOVI}
Answer: This one was a little harder then the previous one. But after reading the so called “docs” of Rockstar, I quickly figured that the output in the song is in conditionals and the conditionals are not evaluating to true. So I just cut them out and pasted the resulting numbers in a “dec-to-ascii”-converter which gave me the answer.
Hint: None
